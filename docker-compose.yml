services:
  radioMysql:
    image: mysql
    container_name: appMysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    ports:
      - 3311:3306
    networks:
      - AppNetwork
    env_file:
      - .env
    volumes:
      - supply_chain_mysql_data:/var/lib/mysql

  App:
    image: node:20.15.1
    container_name: appCT
    working_dir: /frontend
    volumes:
      - ./frontend:/frontend
    ports:
      - 3449:3000
    env_file:
      - .env
    # command: sh -c "npm i && npx prisma migrate dev && npx prisma db pull && npx next dev"
    # Mode PROD
    command: sh -c "npm i && npx prisma migrate deploy && npx prisma generate && npm run build && npm run start"
    restart: unless-stopped
    depends_on:
      - radioMysql
    networks:
      - AppNetwork

  Agent:
    image: python:3.11-slim
    container_name: agentCT
    working_dir: /agent
    volumes:
      - ./agent:/agent
    ports:
      - 8088:8000
    env_file:
      - .env
    environment:
      - UV_PROJECT_ENVIRONMENT=/tmp/agent-env
    command: sh -c "pip install uv && rm -rf .venv && uv sync --frozen && uv run uvicorn main:app --host 0.0.0.0 --port 8000"
    restart: unless-stopped
    depends_on:
      - radioMysql
    networks:
      - AppNetwork
  Cron:
    image: node:20.15.1
    container_name: cronCT
    working_dir: /crontab
    volumes:
      - ./crontab:/crontab
      - /var/run/docker.sock:/var/run/docker.sock  # Acc√®s au socket Docker
    ports:
      - 3050:3000
    env_file:
      - .env
    command: sh -c "apt-get update && apt-get install -y docker.io && npm install && npm run dev"
    restart: unless-stopped
    depends_on:
      - App
      - Agent
    networks:
      - AppNetwork

volumes:
  supply_chain_mysql_data:

networks:
  AppNetwork: