generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
  @@index([createdById], map: "Post_createdById_fkey")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
}

model Message {
  id        Int       @id @default(autoincrement())
  text      String    @db.LongText
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  response  Response?
}

model Audio {
  id         Int       @id @default(autoincrement())
  audio      String    @db.LongText
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  responseId Int?
  response   Response? @relation(fields: [responseId], references: [id])

  @@index([responseId], map: "Audio_responseId_fkey")
}

model Response {
  id                   Int      @id @default(autoincrement())
  text                 String   @db.LongText
  messageId            Int?     @unique // Rendre optionnel
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  model                String?
  cachedTokens         Int?
  candidatesTokenCount Int?
  finishReason         String?
  promptTokenCount     Int?
  tokens               Int?
  Audio                Audio[]
  message              Message? @relation(fields: [messageId], references: [id]) // Relation optionnelle
}
